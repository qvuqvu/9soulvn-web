{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qvuqv\\\\OneDrive\\\\Documents\\\\UIT\\\\ecom2\\\\MERN-Ecommerce\\\\frontend\\\\src\\\\ServiceWorkerWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, Toast } from 'react-bootstrap';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './styles/update-toast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ServiceWorkerWrapper = () => {\n  _s();\n\n  const [showReload, setShowReload] = useState(false);\n  const [waitingWorker, setWaitingWorker] = useState(null);\n\n  const onSWUpdate = registration => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  }; // register the service worker on page load\n\n\n  useEffect(() => {\n    serviceWorkerRegistration.register({\n      onUpdate: onSWUpdate\n    });\n  }, []); // skip waiting and install new updates on page reload\n\n  const reloadPage = () => {\n    waitingWorker === null || waitingWorker === void 0 ? void 0 : waitingWorker.postMessage({\n      type: 'SKIP_WAITING'\n    });\n    setShowReload(false);\n    window.location.reload(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ToastContainer, {\n    className: \"update-toast\",\n    onClick: reloadPage,\n    children: /*#__PURE__*/_jsxDEV(Toast, {\n      show: showReload,\n      onClose: reloadPage,\n      bg: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"me-auto text-black\",\n          children: \"New Version Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n        className: \"text-white\",\n        children: \"Reload to see whats new!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ServiceWorkerWrapper, \"sIfDwlrEMUD2NPXq4TMqjWkHjIU=\");\n\n_c = ServiceWorkerWrapper;\nexport default ServiceWorkerWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ServiceWorkerWrapper\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","Toast","serviceWorkerRegistration","ServiceWorkerWrapper","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","registration","waiting","register","onUpdate","reloadPage","postMessage","type","window","location","reload"],"sources":["C:/Users/qvuqv/OneDrive/Documents/UIT/ecom2/MERN-Ecommerce/frontend/src/ServiceWorkerWrapper.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, Toast } from 'react-bootstrap';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport './styles/update-toast.css';\r\n\r\nconst ServiceWorkerWrapper = () => {\r\n\tconst [showReload, setShowReload] = useState(false);\r\n\tconst [waitingWorker, setWaitingWorker] = useState(null);\r\n\r\n\tconst onSWUpdate = (registration) => {\r\n\t\tsetShowReload(true);\r\n\t\tsetWaitingWorker(registration.waiting);\r\n\t};\r\n\r\n\t// register the service worker on page load\r\n\tuseEffect(() => {\r\n\t\tserviceWorkerRegistration.register({ onUpdate: onSWUpdate });\r\n\t}, []);\r\n\r\n\t// skip waiting and install new updates on page reload\r\n\tconst reloadPage = () => {\r\n\t\twaitingWorker?.postMessage({ type: 'SKIP_WAITING' });\r\n\t\tsetShowReload(false);\r\n\t\twindow.location.reload(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ToastContainer className='update-toast' onClick={reloadPage}>\r\n\t\t\t<Toast show={showReload} onClose={reloadPage} bg='dark'>\r\n\t\t\t\t<Toast.Header>\r\n\t\t\t\t\t<strong className='me-auto text-black'>\r\n\t\t\t\t\t\tNew Version Available\r\n\t\t\t\t\t</strong>\r\n\t\t\t\t</Toast.Header>\r\n\t\t\t\t<Toast.Body className='text-white'>\r\n\t\t\t\t\tReload to see whats new!\r\n\t\t\t\t</Toast.Body>\r\n\t\t\t</Toast>\r\n\t\t</ToastContainer>\r\n\t);\r\n};\r\n\r\nexport default ServiceWorkerWrapper;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,iBAAtC;AACA,OAAO,KAAKC,yBAAZ,MAA2C,6BAA3C;AACA,OAAO,2BAAP;;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;EAAA;;EAClC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;;EAEA,MAAMU,UAAU,GAAIC,YAAD,IAAkB;IACpCJ,aAAa,CAAC,IAAD,CAAb;IACAE,gBAAgB,CAACE,YAAY,CAACC,OAAd,CAAhB;EACA,CAHD,CAJkC,CASlC;;;EACAX,SAAS,CAAC,MAAM;IACfG,yBAAyB,CAACS,QAA1B,CAAmC;MAAEC,QAAQ,EAAEJ;IAAZ,CAAnC;EACA,CAFQ,EAEN,EAFM,CAAT,CAVkC,CAclC;;EACA,MAAMK,UAAU,GAAG,MAAM;IACxBP,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEQ,WAAf,CAA2B;MAAEC,IAAI,EAAE;IAAR,CAA3B;IACAV,aAAa,CAAC,KAAD,CAAb;IACAW,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;EACA,CAJD;;EAMA,oBACC,QAAC,cAAD;IAAgB,SAAS,EAAC,cAA1B;IAAyC,OAAO,EAAEL,UAAlD;IAAA,uBACC,QAAC,KAAD;MAAO,IAAI,EAAET,UAAb;MAAyB,OAAO,EAAES,UAAlC;MAA8C,EAAE,EAAC,MAAjD;MAAA,wBACC,QAAC,KAAD,CAAO,MAAP;QAAA,uBACC;UAAQ,SAAS,EAAC,oBAAlB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADD;QAAA;QAAA;QAAA;MAAA,QADD,eAMC,QAAC,KAAD,CAAO,IAAP;QAAY,SAAS,EAAC,YAAtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAND;IAAA;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADD;AAcA,CAnCD;;GAAMV,oB;;KAAAA,oB;AAqCN,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}