{"ast":null,"code":"/* eslint-disable no-restricted-globals */ // This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nvar fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\nfunction(_ref){var request=_ref.request,url=_ref.url;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains // a file extension, skip.\n// ignore caching the routes that have /api/auth in the react app as they are meant to be API endpoint calls\nif(url.pathname.indexOf('/api/auth')!==-1){return false;}if(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\nfunction(_ref2){var url=_ref2.url;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',function(event){if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","request","url","mode","pathname","startsWith","indexOf","match","process","env","PUBLIC_URL","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting"],"sources":["C:/Users/qvuqv/OneDrive/Documents/UIT/ecom2/MERN-Ecommerce/frontend/src/service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\r\n\r\n// This service worker can be customized!\r\n// See https://developers.google.com/web/tools/workbox/modules\r\n// for the list of available Workbox modules, or add any other\r\n// code you'd like.\r\n// You can also remove this file if you'd prefer not to use a\r\n// service worker, and the Workbox build step will be skipped.\r\n\r\nimport { clientsClaim } from 'workbox-core';\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies';\r\n\r\nclientsClaim();\r\n\r\n// Precache all of the assets generated by your build process.\r\n// Their URLs are injected into the manifest variable below.\r\n// This variable must be present somewhere in your service worker file,\r\n// even if you decide not to use precaching. See https://cra.link/PWA\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Set up App Shell-style routing, so that all navigation requests\r\n// are fulfilled with your index.html shell. Learn more at\r\n// https://developers.google.com/web/fundamentals/architecture/app-shell\r\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\r\nregisterRoute(\r\n\t// Return false to exempt requests from being fulfilled by index.html.\r\n\t({ request, url }) => {\r\n\t\t// If this isn't a navigation, skip.\r\n\t\tif (request.mode !== 'navigate') {\r\n\t\t\treturn false;\r\n\t\t} // If this is a URL that starts with /_, skip.\r\n\r\n\t\tif (url.pathname.startsWith('/_')) {\r\n\t\t\treturn false;\r\n\t\t} // If this looks like a URL for a resource, because it contains // a file extension, skip.\r\n\r\n\t\t// ignore caching the routes that have /api/auth in the react app as they are meant to be API endpoint calls\r\n\t\tif (url.pathname.indexOf('/api/auth') !== -1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (url.pathname.match(fileExtensionRegexp)) {\r\n\t\t\treturn false;\r\n\t\t} // Return true to signal that we want to use the handler.\r\n\r\n\t\treturn true;\r\n\t},\r\n\tcreateHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\r\n);\r\n\r\n// An example runtime caching route for requests that aren't handled by the\r\n// precache, in this case same-origin .png requests like those from in public/\r\nregisterRoute(\r\n\t// Add in any other file extensions or routing criteria as needed.\r\n\t({ url }) =>\r\n\t\turl.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\r\n\tnew StaleWhileRevalidate({\r\n\t\tcacheName: 'images',\r\n\t\tplugins: [\r\n\t\t\t// Ensure that once this runtime cache reaches a maximum size the\r\n\t\t\t// least-recently used images are removed.\r\n\t\t\tnew ExpirationPlugin({ maxEntries: 50 }),\r\n\t\t],\r\n\t})\r\n);\r\n\r\n// This allows the web app to trigger skipWaiting via\r\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\r\nself.addEventListener('message', (event) => {\r\n\tif (event.data && event.data.type === 'SKIP_WAITING') {\r\n\t\tself.skipWaiting();\r\n\t}\r\n});\r\n\r\n// Any other custom service worker logic can go here.\r\n"],"mappings":"AAAA,0C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAASA,YAAT,KAA6B,cAA7B,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,OAASC,gBAAT,CAA2BC,uBAA3B,KAA0D,oBAA1D,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,oBAAT,KAAqC,oBAArC,CAEAL,YAAY,GAEZ;AACA;AACA;AACA;AACAE,gBAAgB,CAACI,IAAI,CAACC,aAAN,CAAhB,CAEA;AACA;AACA;AACA,GAAMC,oBAAmB,CAAG,GAAIC,OAAJ,CAAW,kBAAX,CAA5B,CACAL,aAAa,CACZ;AACA,cAAsB,IAAnBM,QAAmB,MAAnBA,OAAmB,CAAVC,GAAU,MAAVA,GAAU,CACrB;AACA,GAAID,OAAO,CAACE,IAAR,GAAiB,UAArB,CAAiC,CAChC,MAAO,MAAP,CACA,CAAC;AAEF,GAAID,GAAG,CAACE,QAAJ,CAAaC,UAAb,CAAwB,IAAxB,CAAJ,CAAmC,CAClC,MAAO,MAAP,CACA,CAAC;AAEF;AACA,GAAIH,GAAG,CAACE,QAAJ,CAAaE,OAAb,CAAqB,WAArB,IAAsC,CAAC,CAA3C,CAA8C,CAC7C,MAAO,MAAP,CACA,CAED,GAAIJ,GAAG,CAACE,QAAJ,CAAaG,KAAb,CAAmBR,mBAAnB,CAAJ,CAA6C,CAC5C,MAAO,MAAP,CACA,CAAC;AAEF,MAAO,KAAP,CACA,CAtBW,CAuBZL,uBAAuB,CAACc,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAyB,aAA1B,CAvBX,CAAb,CA0BA;AACA;AACAf,aAAa,CACZ;AACA,mBAAGO,IAAH,OAAGA,GAAH,OACCA,IAAG,CAACS,MAAJ,GAAed,IAAI,CAACe,QAAL,CAAcD,MAA7B,EAAuCT,GAAG,CAACE,QAAJ,CAAaS,QAAb,CAAsB,MAAtB,CADxC,EAFY,CAG2D;AACvE,GAAIjB,qBAAJ,CAAyB,CACxBkB,SAAS,CAAE,QADa,CAExBC,OAAO,CAAE,CACR;AACA;AACA,GAAIvB,iBAAJ,CAAqB,CAAEwB,UAAU,CAAE,EAAd,CAArB,CAHQ,CAFe,CAAzB,CAJY,CAAb,CAcA;AACA;AACAnB,IAAI,CAACoB,gBAAL,CAAsB,SAAtB,CAAiC,SAACC,KAAD,CAAW,CAC3C,GAAIA,KAAK,CAACC,IAAN,EAAcD,KAAK,CAACC,IAAN,CAAWC,IAAX,GAAoB,cAAtC,CAAsD,CACrDvB,IAAI,CAACwB,WAAL,GACA,CACD,CAJD,EAMA"},"metadata":{},"sourceType":"module"}